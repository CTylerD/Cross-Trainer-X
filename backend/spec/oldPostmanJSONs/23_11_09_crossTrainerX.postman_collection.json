{
	"info": {
		"_postman_id": "93c43850-e4a2-43f4-a987-d2a119287e71",
		"name": "crossTrainerX",
		"description": "This collection tests the API specification given for Assignment 3.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_boat_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_slip_id\n- Set it to a value that's not an ID of any slip in your porject. I have set it to 1 and that should work for you as well.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10725765"
	},
	"item": [
		{
			"name": "add strength_exercise1 (user1) 201 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"strength_exercise_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Deadlift\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Strength\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Lift a barbell from the ground to a standing position\");",
							"    pm.expect(pm.response.json()[\"muscleGroup\"]).to.eq(\"Back\");",
							"    pm.expect(pm.response.json()[\"equipment\"]).to.eq(\"barbell\");",
							"    pm.expect(pm.response.json()[\"reps\"]).to.eq(6);",
							"    pm.expect(pm.response.json()[\"sets\"]).to.eq(5);",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(120);",
							"    pm.expect(pm.response.json()[\"rest\"]).to.eq(120);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"strength_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Deadlift\",\r\n  \"type\": \"Strength\",\r\n  \"description\": \"Lift a barbell from the ground to a standing position\",\r\n  \"muscleGroup\": \"Back\",\r\n  \"equipment\": \"barbell\",\r\n  \"reps\": 6,\r\n  \"sets\": 5,\r\n  \"weight\": 120,\r\n  \"rest\": 120\r\n}\r\n"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add strength_exercise2 (user2) 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"strength_exercise_id2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Squat\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Strength\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Lower your body as if you were sitting in a chair, then stand back up\");",
							"    pm.expect(pm.response.json()[\"muscleGroup\"]).to.eq(\"Legs\");",
							"    pm.expect(pm.response.json()[\"equipment\"]).to.eq(\"dumbbells\");",
							"    pm.expect(pm.response.json()[\"reps\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"sets\"]).to.eq(3);",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(50);",
							"    pm.expect(pm.response.json()[\"rest\"]).to.eq(60);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"strength_exercise_id2\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Squat\",\r\n  \"type\": \"Strength\",\r\n  \"description\": \"Lower your body as if you were sitting in a chair, then stand back up\",\r\n  \"muscleGroup\": \"Legs\",\r\n  \"equipment\": \"dumbbells\",\r\n  \"reps\": 10,\r\n  \"sets\": 3,\r\n  \"weight\": 50,\r\n  \"rest\": 60\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add cardio_exercise1 (user1) 201 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"cardio_exercise_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Running\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Cardio\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Outdoor jogging or running\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(45);",
							"    pm.expect(pm.response.json()[\"distance\"]).to.eq(5);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"cardio_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Running\",\r\n  \"type\": \"Cardio\",\r\n  \"description\": \"Outdoor jogging or running\",\r\n  \"duration\": 45,\r\n  \"distance\": 5\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add cardio_exercise2 (user2) 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"cardio_exercise_id2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Cycling\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Cardio\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Biking on a scenic route\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(30);",
							"    pm.expect(pm.response.json()[\"distance\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"cardio_exercise_id2\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Cycling\",\r\n  \"type\": \"Cardio\",\r\n  \"description\": \"Biking on a scenic route\",\r\n  \"duration\": 30,\r\n  \"distance\": 10\r\n}\r\n"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add flexibility_exercise1 (user1) 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"flexibility_exercise_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Forward Bend\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Flexibility\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Bend forward from the waist, reaching toward the toes\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(20);",
							"    pm.expect(pm.response.json()[\"difficulty\"]).to.eq(2);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"flexibility_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Forward Bend\",\r\n  \"type\": \"Flexibility\",\r\n  \"description\": \"Bend forward from the waist, reaching toward the toes\",\r\n  \"duration\": 20,\r\n  \"difficulty\": 2\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add flexibility_exercise2 (user2) 201 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"flexibility_exercise_id2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Neck Stretch\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Flexibility\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Gently tilt your head to each side to stretch the neck muscles\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(15);",
							"    pm.expect(pm.response.json()[\"difficulty\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"flexibility_exercise_id2\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Neck Stretch\",\r\n  \"type\": \"Flexibility\",\r\n  \"description\": \"Gently tilt your head to each side to stretch the neck muscles\",\r\n  \"duration\": 15,\r\n  \"difficulty\": 1\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add exercise with missing attributes 400 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The exercise request data is invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Bench Press\"\r\n}\r\n"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add exercise with invalid response MIME type 406 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The requested response MIME type is not supported by this endpoint\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Bench Press\",\r\n  \"type\": \"Strength Training\",\r\n  \"description\": \"A reclined barbell exercise\",\r\n  \"muscleGroup\": \"chest shoulders arms\",\r\n  \"equipment\": \"barbell\",\r\n  \"rating\": 5\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "add exercise with invalid MIME type 415 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request MIME type is not supported by this endpoint\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "audio/aac"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Bench Press\",\r\n  \"type\": \"Strength Training\",\r\n  \"description\": \"A reclined barbell exercise\",\r\n  \"muscleGroup\": \"chest shoulders arms\",\r\n  \"equipment\": \"barbell\",\r\n  \"rating\": 5\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all exercises (user1) 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json().length).to.equal(3);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all exercises (user2) 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json().length).to.equal(3);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "get strength_exercise1 with 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"        pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"strength_exercise_id1\"));",
							"",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Deadlift\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Strength\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Lift a barbell from the ground to a standing position\");",
							"    pm.expect(pm.response.json()[\"muscleGroup\"]).to.eq(\"Back\");",
							"    pm.expect(pm.response.json()[\"equipment\"]).to.eq(\"barbell\");",
							"    pm.expect(pm.response.json()[\"reps\"]).to.eq(6);",
							"    pm.expect(pm.response.json()[\"sets\"]).to.eq(5);",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(120);",
							"    pm.expect(pm.response.json()[\"rest\"]).to.eq(120);",
							"    pm.expect(pm.response.json()[\"userId\"]);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"strength_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get cardio_exercise1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"cardio_exercise_id1\"));",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Running\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Cardio\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Outdoor jogging or running\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(45);",
							"    pm.expect(pm.response.json()[\"distance\"]).to.eq(5);",
							"});",
							"    pm.expect(pm.response.json()[\"userId\"]);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"cardio_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{cardio_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{cardio_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get flexibility_exercise1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"id\"]).to.eq(pm.environment.get(\"flexibility_exercise_id1\"));",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Forward Bend\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Flexibility\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Bend forward from the waist, reaching toward the toes\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(20);",
							"    pm.expect(pm.response.json()[\"difficulty\"]).to.eq(2);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"flexibility_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{flexibility_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{flexibility_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get exercise with wrong user 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Access denied: this exercise does not belong to the current user\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get exercise with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No exercise with this exerciseId exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{invalid_exercise_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{invalid_exercise_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get exercise with invalid response MIME type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The requested response MIME type is not supported by this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get exercise with invalid MIME type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 Unsupported Media Type\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request MIME type is not supported by this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all exercises with invalid response MIME type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The requested response MIME type is not supported by this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all exercises with invalid MIME type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request MIME type is not supported by this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "put strength_exercise1 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"405 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This method is not allowed on this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "put all exercises 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"405 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This method is not allowed on this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch all exercises 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"405 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This method is not allowed on this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit strength_exercise1 (user1) 2000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Deadlifted\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Strength\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Lift a barbell from the ground to a standing position\");",
							"    pm.expect(pm.response.json()[\"muscleGroup\"]).to.eq(\"Back\");",
							"    pm.expect(pm.response.json()[\"equipment\"]).to.eq(\"barbell\");",
							"    pm.expect(pm.response.json()[\"reps\"]).to.eq(7);",
							"    pm.expect(pm.response.json()[\"sets\"]).to.eq(8);",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(121);",
							"    pm.expect(pm.response.json()[\"rest\"]).to.eq(121);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"strength_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Deadlifted\",\r\n  \"type\": \"Strength\",\r\n  \"description\": \"Lift a barbell from the ground to a standing position\",\r\n  \"muscleGroup\": \"Back\",\r\n  \"equipment\": \"barbell\",\r\n  \"reps\": 7,\r\n  \"sets\": 8,\r\n  \"weight\": 121,\r\n  \"rest\": 121\r\n}\r\n"
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit cardio_exercise1 (user1) 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Runninging\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Cardio\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Indoor jogging or running\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(60);",
							"    pm.expect(pm.response.json()[\"distance\"]).to.eq(6);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"cardio_exercise_id1\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Runninging\",\r\n  \"type\": \"Cardio\",\r\n  \"description\": \"Indoor jogging or running\",\r\n  \"duration\": 60,\r\n  \"distance\": 6\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{cardio_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{cardio_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit flexibility_exercise2 (user2) 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Neck Stretcher\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Flexibility\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Gently tilt your head to each side to stretch the neck muscles\");",
							"    pm.expect(pm.response.json()[\"duration\"]).to.eq(50);",
							"    pm.expect(pm.response.json()[\"difficulty\"]).to.eq(2);",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(`${pm.environment.get(\"app_url\")}/exercises/${pm.environment.get(\"flexibility_exercise_id2\")}`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Neck Stretcher\",\r\n  \"type\": \"Flexibility\",\r\n  \"description\": \"Gently tilt your head to each side to stretch the neck muscles\",\r\n  \"duration\": 50,\r\n  \"difficulty\": 2\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{flexibility_exercise_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{flexibility_exercise_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit exercise with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The exercise request data is invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Bench Press\"\r\n}\r\n"
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit exercise with invalid response MIME type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The requested response MIME type is not supported by this endpoint\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Bench Press\",\r\n  \"type\": \"Strength Training\",\r\n  \"description\": \"A reclined barbell exercise\",\r\n  \"muscleGroup\": \"chest shoulders arms\",\r\n  \"equipment\": \"barbell\",\r\n  \"rating\": 5\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add exercise with invalid MIME type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request MIME type is not supported by this endpoint\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "audio/aac"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Bench Press\",\r\n  \"type\": \"Strength Training\",\r\n  \"description\": \"A reclined barbell exercise\",\r\n  \"muscleGroup\": \"chest shoulders arms\",\r\n  \"equipment\": \"barbell\",\r\n  \"rating\": 5\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete all exercises 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"405 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This method is not allowed on this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete strength_exercise1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "verify strength_exercise1 no longer exists 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No exercise with this exerciseId exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete exercise with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No exercise with this exerciseId exists\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete strength_exercise2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete cardio_exercise1 with invalid user2 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Access denied: this exercise does not belong to the current user\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{cardio_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{cardio_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete cardio_exercise2 with invalid user1 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Access denied: this exercise does not belong to the current user\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/exercises/{{cardio_exercise_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{cardio_exercise_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete cardio_exercise1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{cardio_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{cardio_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete cardio_exercise2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{cardio_exercise_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{cardio_exercise_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete flexibility_exercise1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{flexibility_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{flexibility_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete flexibility_exercise2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/exercises/{{flexibility_exercise_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{flexibility_exercise_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete exercise with invalid response MIME type 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The requested response MIME type is not supported by this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete exercise with invalid MIME type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"415 Unsupported Media Type\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request MIME type is not supported by this endpoint\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "audio/aac",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/exercises/{{strength_exercise_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"exercises",
						"{{strength_exercise_id1}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt1}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}